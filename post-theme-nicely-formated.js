function NF_GetRepetions(text) {
  /* –ò—â–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑(char, begin_pos, length)) */
  
  let items = []

  let prev_c = null
  let seq_begin = -1

  let cpos = 0
  for(let c of text) {

    if (c==prev_c) { // sequence continue

      if (seq_begin==-1) // new sequence begins
        seq_begin = cpos - 1

    } else { // boundary
      if (seq_begin>=0) { // sequence ends
        count = cpos - seq_begin
        items.push( [prev_c, seq_begin, count] )
        seq_begin = -1
      }
    }  

    prev_c = c

    cpos += 1
} //for

    return items
}


function NF_GetSmiles(text) {
  /* –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–º–∞–π–ª–æ–≤ —Ç–µ–∫—Å—Ç–µ.
  –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–º–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç(smile_char, pos_in_text)
  */

  function IsSmile(c) {
	const NON_SMILES = '‚Äî¬´¬ª';  
	
    let co = c.charCodeAt(0);
    let isCyrrilic = ((co>=1040) && (co<=1103)) || (c=='–Å') || (c=='—ë');
	
    return co>255 && !isCyrrilic && !NON_SMILES.includes(c);
  }


  smiles = []
  let cpos = 0
  for (let c of text) {
    if (IsSmile(c)) {
      smiles.push( [c, cpos] )
    }

    cpos += 1
    } //for    

  return smiles
  }


//console.log(/^\d+([\.\,]\d+)?$/.test('1205') )

function NF_GetDigits(text) {
	/* 720  3,050 1055.2 - –∑–Ω–∞—á–µ–Ω–∏–µ
	25.06 15.08.25 08.08.2025 2025 - –¥–∞—Ç–∞
	1.5%, 25% - –ø—Ä–æ—Ü–µ–Ω—Ç—ã
	15:00 17-00 - –≤—Ä–µ–º—è
	*/

	function IsDate(s) {
		if (/^\d{4}$/.test(s)) { // '2025'
		  y = parseInt(s, 10)
		  return (y>=2020) && (y<=2030)
		}

		if (!/^\d{2}\.\d{2}(\.\d{2,4})?$/.test(s)) { // '22.09' '22.09.2025':
			return false
		}

		let dmy_s = s.split('.')
		//dmy = [int(a) for a in dmy]
		let dmy = []
		for (let a of dmy_s) dmy.push( parseInt(a, 10) )

		let ok = (dmy[0]<=31) && (dmy[1]<=12)

		if (dmy.length==3) {
			let y = dmy[2]
			let y2d = (y>=20) && (y<30)
			let y4d = (y>=2020) && (y<2030)
			ok = ok && (y2d || y4d)
		}

		return ok
	} //IsDate


	function IsCent(s) {
		return /^\d+([\.\,]\d+)?\%$/.test(s) 
	}

	function IsTime(s) {
		return /^\d{2}\:\d{2}$/.test(s)
	}

	function IsValue(s) {
		return /^\d+([\.\,]\d+)?$/.test(s)
	}

	items = []

	reg = /\b\d+([\.\,\:]\d+)?(\.\d+)?(\%|\b)/g

	let matchAll = text.matchAll(reg)

	for (let m of matchAll) {
		//console.log(m[0], m.index)
		let s = m[0]

		let item_type = null
		if (IsDate(s)) {
			item_type = 'date'
		} else if (IsCent(s)) {
			item_type = 'cent'    
		} else if (IsTime(s)) {
			item_type = 'time'
		} else if (IsValue(s)) {
			item_type = 'value'
		}

		if (item_type) {
			items.push( [s, m.index, item_type] )
		}      

	} //for
  
    return items
} // NF_GetDigits

function NF_GetTickers(text) {
	let items = []

	const reg = /\$\w+\b/g

	let matchAll = text.matchAll(reg)

	for (let m of matchAll) {
	  items.push( [m[0], m.index] )
	}

	return items
} //NF_GetTickers


function NF_summary(text) {

	function GetMediana(distances) {
		let mediana = 0.0

		if (distances.length>0) {
			distances.sort()

			if (distances.length%2 == 1) { // odd length
				let middle = (distances.length - 1)/2
				mediana = distances[middle]
			} else { // even length
				let middle = distances.length/2
				mediana = (distances[middle - 1] + distances[middle]) / 2.0
			} //if
		} //if

		return mediana
	  } //GetMediana

	let count
	let summary = {}

	// Paragraph - /n
	let m
	
	summary['nLf'] = 0
	m = text.match(/\n/g)
	if (m) summary['nLf'] = m.length //text.count('\n')
	
	summary['nLf2'] = 0
	m = text.match(/\n\n/g)
	if (m) summary['nLf2'] = m.length //text.count('\n\n')

	// Repetitions
	let items = NF_GetRepetions(text) //[(char, start, len)]

	const MINREPLEN = 5

	summary['lineSep'] = 0
	for (let it of items) {
		if (it[0].charCodeAt(0)<65 && it[2]>MINREPLEN) // 65 = ord('A')
			summary['lineSep'] += 1
	}

	// Smiles
	items = NF_GetSmiles(text) //[(char, pos)]
	summary['smiles-count'] = items.length

	//distances = [items[i + 1][1] - items[i][1] for i in range(len(items) - 1)]
	distances = []
	for (let i = 0; i<items.length-1; i++) distances.push( items[i+1][1] - items[i][1] )

	mediana = GetMediana(distances)
	summary['smiles-mediana'] = mediana

	summary['smiles-mediana-ratio'] = 0.0
	if (items.length>0) summary['smiles-mediana-ratio'] = mediana/(text.length/items.length)

	// Digits
	items = NF_GetDigits(text)
	summary['digits-count'] = items.length

	//distances = [items[i + 1][1] - items[i][1] for i in range(len(items) - 1)]
	distances = []
	for (let i=0; i<items.length-1; i++) distances.push(items[i + 1][1] - items[i][1])

	mediana = GetMediana(distances)
	summary['digits-mediana'] = mediana

	summary['digits-mediana-ratio'] = 0.0
	if (items.length>0) summary['digits-mediana-ratio'] = mediana/(text.length/items.length)

	// Digits - cents
	count = 0
	for (it of items) {
		//console.log(it)
		if (it[2]=='cent') count += 1
	}
	summary['digits-cent-count'] = count

	// Tickers
	items = NF_GetTickers(text)
	summary['tickers-count'] = items.length

	//distances = [items[i + 1][1] - items[i][1] for i in range(len(items) - 1)]
	distances = []
	for (let i=0; i<items.length-1; i++) distances.push(items[i + 1][1] - items[i][1])

	mediana = GetMediana(distances)
	summary['tickers-mediana'] = mediana

	summary['tickers-mediana-ratio'] = 0.0
	if (items.length>0) summary['tickers-mediana-ratio'] = mediana/(text.length/items.length)

	return summary
} //NF_summary


function NF_rating(summary) {
	//console.log('PalyExam.NF_rating.smr', summary)
	RATIO_MIN = 0.6;

	let rate = 0;	
	//rate = 2 * summary['nLf2'] + 2 * summary['lineSep'];

	if (summary['smiles-mediana-ratio'] > RATIO_MIN)
	  rate += 2*summary['smiles-count'];
  
	if (summary['digits-cent-count']>=2)
		rate += 5*summary['digits-cent-count'];
  
/*
	if (summary['digits-mediana-ratio'] > RATIO_MIN)
	  rate += summary['digits-count'];

	if (summary['tickers-mediana-ratio'] > RATIO_MIN)
	  rate += summary['tickers-count'];
*/

	//console.log('PalyExam.NF_rating.rate', rate)

	return rate;
} //NF_rating



/*
text = 'abd $SBER $CONT fer'
items = NF_GetTickers(text)
console.log(items)
*/

/*
text = "–§–ª—ç—Ç 3,00‚Äì3,03 ‚Äî 50% . –ò–≥—Ä–∞—Ç—å –æ—Ç –≥—Ä–∞–Ω–∏—Ü –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–∏–¥–æ—Ä–∞;" +
" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫–∞–∑—ã –æ—Ç –ø—Ä–æ–±–æ–µ–≤ –Ω–∞ 5-–º–∏–Ω." +
"720  3,050 1055.2 - –∑–Ω–∞—á–µ–Ω–∏–µ\n" +
"25.06 15.08.25 08.08.2025 2025 - –¥–∞—Ç–∞\n" +
"1,5% 25% - –ø—Ä–æ—Ü–µ–Ω—Ç—ã\n" +
"15:00 17-00 - –≤—Ä–µ–º—è"
items = NF_GetDigits(text)
console.log(items)
*/

/*
text = "+++–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n==============\nSecond string and two LF\n\nThe end"
items = NF_GetRepetions(text)
console.log(items)
*/

/*
text = "üß†üí∞ –î–û–§–ê–ú–ò–ù–û–í–ê–Ø –ò–ì–õ–ê: –ö–∞–∫ –Ω–∞—à –º–æ–∑–≥ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã\n\n" +
       "–ó–Ω–∞–µ—à—å, –ø–æ—á–µ–º—É –ø–æ—Å–ª–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–µ–Ω—å–≥–∏ —Ç–∞—é—Ç —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –±—É–¥—Ç–æ –∏—Ö –∏ –Ω–µ –±—ã–ª–æ?" +
       " üç¶‚òÄÔ∏è –î–µ–ª–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤ —Å–∏–ª–µ –≤–æ–ª–∏ ‚Äî —ç—Ç–æ –±–∏–æ—Ö–∏–º–∏—è –º–æ–∑–≥–∞!\n\n" +
       "üéØ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤–µ"     
smiles = NF_GetSmiles(text)
console.log(smiles)
*/

/*
–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∫–æ–Ω—Ü–µ—Ä–Ω Boeing Co., –æ–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –º–∏—Ä–æ–≤—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–π, –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏ –≤–æ–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏, —Ä–µ–∑–∫–æ —É–≤–µ–ª–∏—á–∏–ª —á–∏—Å—Ç—ã–π —É–±—ã—Ç–æ–∫ –≤–æ 2-–º –∫–≤–∞—Ä—Ç–∞–ª–µ –∏ —Å–æ–∫—Ä–∞—Ç–∏–ª –≤—ã—Ä—É—á–∫—É –Ω–∞ 15%, –ø—Ä–∏—á–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–±—ã—Ç–æ–∫ –∏ –≤—ã—Ä—É—á–∫–∞ –æ–∫–∞–∑–∞–ª–∏—Å—å —Ö—É–∂–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Ä—ã–Ω–∫–∞.
–ü—Ä–∏ —ç—Ç–æ–º –∞–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ—Ä–æ–∂–∞—é—Ç –ø–æ—Å–ª–µ –∑–∞—è–≤–ª–µ–Ω–∏–π —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –≤—ã–ø—É—Å–∫–∞–µ–º—ã—Ö —Å–∞–º–æ–ª–µ—Ç–æ–≤.
–ö–∞–∫ —Å–æ–æ–±—â–∞–µ—Ç—Å—è –≤ –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑–µ Boeing, —á–∏—Å—Ç—ã–π —É–±—ã—Ç–æ–∫ –≤ –∞–ø—Ä–µ–ª–µ-–∏—é–Ω–µ 2024 –≥–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–∏–ª $1,44 –º–ª—Ä–¥, –∏–ª–∏ $2,33 –≤ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞ –∞–∫—Ü–∏—é, –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —É–±—ã—Ç–∫–æ–º –≤ —Ä–∞–∑–º–µ—Ä–µ $149 –º–ª–Ω, –∏–ª–∏ $0,25 –Ω–∞ –∞–∫—Ü–∏—é, –∑–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ–¥–∞.
–£–±—ã—Ç–æ–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–∞–∑–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É–≤–µ–ª–∏—á–∏–ª—Å—è –¥–æ $2,90 –Ω–∞ –∞–∫—Ü–∏—é —Å $0,82.
–í—ã—Ä—É—á–∫–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ 15% - –¥–æ $16,87 –º–ª—Ä–¥.
–ê–Ω–∞–ª–∏—Ç–∏–∫–∏, –æ–ø—Ä–æ—à–µ–Ω–Ω—ã–µ FactSet, –≤ —Å—Ä–µ–¥–Ω–µ–º –æ–∂–∏–¥–∞–ª–∏, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—É—á–∏—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–±—ã—Ç–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ $1,9 –Ω–∞ –∞–∫—Ü–∏—é –ø—Ä–∏ –≤—ã—Ä—É—á–∫–µ –≤ $17,35 –º–ª—Ä–¥.
"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å–ª–æ–∂–Ω—ã–π –∫–≤–∞—Ä—Ç–∞–ª, –º—ã –≤–∏–¥–∏–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø—Ä–∏—Ü–µ–ª–æ–º –Ω–∞ –±—É–¥—É—â–µ–µ", - —Å–∫–∞–∑–∞–ª –≥–ª–∞–≤–∞ Boeing –î–µ–π–≤ –ö–∞–ª—Ö—É–Ω.
–í—ã—Ä—É—á–∫–∞ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö —Å–∞–º–æ–ª–µ—Ç–æ–≤ –≤ –º–∏–Ω—É–≤—à–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ —É–ø–∞–ª–∞ –Ω–∞ 32% –∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ $6 –º–ª—Ä–¥. –í—ã—Ä—É—á–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ–±–æ—Ä–æ–Ω–Ω–æ–π –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –≤ –º–∏–Ω—É–≤—à–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ —Å–æ–∫—Ä–∞—Ç–∏–ª–∞—Å—å –Ω–∞ 2% –∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ $6,02 –º–ª—Ä–¥.
–ü–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–æ–Ω–µ—Ü –≤—Ç–æ—Ä–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞ —Å–æ—Å—Ç–∞–≤–ª—è–ª $516 –º–ª—Ä–¥ –∏ –≤–∫–ª—é—á–∞–ª –≤ —Å–µ–±—è —Å–≤—ã—à–µ 5,4 —Ç—ã—Å. —Å–∞–º–æ–ª–µ—Ç–æ–≤.
–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π Boeing —Ä–∞—Å—Ç—É—Ç –Ω–∞ 1,8% –≤ —Ö–æ–¥–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ –≤ —Å—Ä–µ–¥—É. –° –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞ —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ —É–ø–∞–ª–∞ –Ω–∞ 28,3%, –¥–æ $115 –º–ª—Ä–¥.
*/

/*
summary = NF_summary(text)
console.log(summary)
//console.log(NF_rating(summary))
*/
